name: Tests

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-unix:
    name: ${{ matrix.os }} - ${{ matrix.features }}
    
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        features:
          - name: "dynamic"
            flags: ""
            install_deps: true
          - name: "static unixODBC"
            flags: "--features static"
            install_deps: false
          - name: "static iODBC"
            flags: "--features static,iodbc"
            install_deps: false
    
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # tag=v4.1.1
        with:
          submodules: 'recursive'
      
      - name: Install system ODBC (if needed)
        if: matrix.features.install_deps
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y unixodbc-dev
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install unixodbc
          fi
        shell: bash
      
      - name: Build
        run: cargo build --verbose ${{ matrix.features.flags }}
      
      - name: Run tests
        run: cargo test --verbose ${{ matrix.features.flags }}

  test-windows:
    name: Windows - ${{ matrix.arch }}
    
    runs-on: windows-latest
    
    strategy:
      matrix:
        arch:
          - target: x86_64-pc-windows-msvc
            name: "64-bit"
          - target: i686-pc-windows-msvc
            name: "32-bit"
    
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # tag=v4.1.1
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.arch.target }}
      
      - name: Build
        run: cargo build --verbose --target ${{ matrix.arch.target }}
      
      - name: Run tests
        run: cargo test --verbose --target ${{ matrix.arch.target }}
